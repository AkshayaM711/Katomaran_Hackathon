{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madhu\\\\OneDrive\\\\Desktop\\\\Katomaran_Face_Platform\\\\frontend\\\\src\\\\components\\\\RegisterFace.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterFace = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (err) {\n      console.error(\"Failed to start camera:\", err);\n    }\n  };\n  const captureAndRegister = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL(\"image/jpeg\");\n    const response = await fetch(\"http://localhost:5000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        image: dataURL\n      })\n    });\n    const result = await response.json();\n    alert(result.message || \"Face registered!\");\n  };\n  useEffect(() => {\n    startCamera();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl mb-2\",\n      children: \"Register Face\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      width: \"640\",\n      height: \"480\",\n      className: \"rounded border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"640\",\n      height: \"480\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startCamera,\n        className: \"bg-green-500 text-white px-4 py-2 rounded\",\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: captureAndRegister,\n        className: \"bg-purple-500 text-white px-4 py-2 rounded\",\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterFace, \"0gwqVvoOV2or9Ql4L8GH2BGn3hc=\");\n_c = RegisterFace;\nexport default RegisterFace;\nvar _c;\n$RefreshReg$(_c, \"RegisterFace\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","RegisterFace","_s","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","err","console","error","captureAndRegister","canvas","ctx","getContext","drawImage","width","height","dataURL","toDataURL","response","fetch","method","headers","body","JSON","stringify","image","result","json","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","hidden","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Madhu/OneDrive/Desktop/Katomaran_Face_Platform/frontend/src/components/RegisterFace.jsx"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\nconst RegisterFace = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const startCamera = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to start camera:\", err);\r\n    }\r\n  };\r\n\r\n  const captureAndRegister = async () => {\r\n    const canvas = canvasRef.current;\r\n    const video = videoRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    const dataURL = canvas.toDataURL(\"image/jpeg\");\r\n\r\n    const response = await fetch(\"http://localhost:5000/register\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ image: dataURL }),\r\n    });\r\n\r\n    const result = await response.json();\r\n    alert(result.message || \"Face registered!\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    startCamera();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl mb-2\">Register Face</h2>\r\n      <video ref={videoRef} autoPlay width=\"640\" height=\"480\" className=\"rounded border\" />\r\n      <canvas ref={canvasRef} width=\"640\" height=\"480\" hidden />\r\n      <div className=\"mt-4 flex gap-2\">\r\n        <button onClick={startCamera} className=\"bg-green-500 text-white px-4 py-2 rounded\">Start</button>\r\n        <button onClick={captureAndRegister} className=\"bg-purple-500 text-white px-4 py-2 rounded\">Capture</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterFace;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}